507 Compilers are traditionally thought of as having a â€œfront endâ€ that analyzes the source code (high-level language statements) and a â€œback endâ€ that generates the appropriate low-level code.  The front end processing begins with lexical analysis.  The compiler scans the source program looking for matches to valid tokens as defined by the language.  A token is any word or symbol that has meaning in the language  such as a keyword (reserved word) such as if or while.  Next  the tokens are parsed or grouped according to the rules of the language.  The result of parsing is a â€œparse treeâ€ that resolves statements into their component parts.  For example  an assignment statement may be parsed into an identifier  an assignment operator (such as =)  and a value to be assigned.  The value in turn may be an arithmetic expression that consists of operators and operands.  
