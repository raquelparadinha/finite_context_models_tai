182 Users of modern operating systems such as microsoft Win-dows are familiar with multitasking  or running several programs at the same time.  For example  a user might be writing a document in a word processor  pause to check the e-mail program for incoming messages  type a page address int o a Web browser  then return to writing.  meanwhile  the operating system may be running a number of other pro-grams tucked unobtrusively into the background  such as a virus checker  task scheduler  or system resource monitor. Each running program â€œtakes turnsâ€ using the PCâ€™s cen-tral processor.  In early versions of Windows  multitasking was cooperative  with each program expected to periodically yield the processor to Windows so it could be assigned to the next program in the queue.  One weakness of this approach is that if a program crashes  the CPU might be â€œlocked upâ€ and the system would have to be rebooted.  However  Win-dows NT  2000  and xP (as well as operating systems such as UNIx) use preemptive multitasking.  The operating sys-tem assigns a â€œsliceâ€ of processing (CPU) time to a program and then switches it to the next program regardless of what might be happening to the previous program.  Thus  if a pro-gram  â€œcrashes â€  the  CPU  will  still  be  switched  to  the  next program   and  the  user  can  maintain  control  of  the  system and shut down the offending program.  
