288 Functional languages have generally been used for special-ized  purposes   although  they  can  in  principle  perform  any task  that  an  imperative  language  can.   APL   which  is  basi-cally a functional language  has devotees who appreciate its compact  and  powerful  syntax  for  performing  calculations  .   LISP  and  its  variants  have  long  been  favored  for many  artificial  intelligence  applications   particularly  natu-ral language processing  where its representation of data as lists and the facility of its list-processing functions seems a natural fit. Proponents of functional languages argue that they free the  programmer  from  having  to  be  concerned  with  explic-itly setting up and using variables.  In a functional language  problems can often be stated in a more purely mathematical way.   Further   because  functional  programs  are  not  orga-nized  as  sequentially  executed  tasks   it  may  be  easier  to implement  parallel  processing  systems  using  functional languages. However  critics point out that imperative languages are much  closer  to  how  computers  actually  work  (employing actual storage locations and sequential operation) and thus produce  code  likely  to  be  much  faster  and  more  efficient than that produced by functional languages.  
