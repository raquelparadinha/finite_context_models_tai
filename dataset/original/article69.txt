68 Programmers and managers of software development are generally aware of the need for software to properly deal with erroneous data  .  They know that any significant program will have bugs that must be rooted out  .  Good software engineering practices and a systematic approach to assuring the reliability and quality of software can minimize problems in the finished product  .  However  serious bugs are not always caught  and sometimes the consequences can be catastrophic.  For example  in the Therac 25 computerized X-ray cancer treatment machine  poorly thought-out command entry routines plus a counter overflow resulted in three patients being killed by massive X-ray overdoses.  The overdoses ultimately occurred because the designers had removed a physical interlock mechanism they believed was no longer necessary. Any computer application is part of a much larger environment of humans and machines  where unforeseen interactions can cause problems ranging from inconvenience to loss of privacy to potential injury or death.  Seeing these potential pitfalls requires thinking beyond the specifications and needs of a particular project.  For many years the Usenet newsgroup comp. risks (and its collected form  Risks Digest) have chronicled what amounts to an ongoing symposium where knowledgeable programmers  engineers  and others have pointed out potential risks in new technology and suggested ways to minimize them 
